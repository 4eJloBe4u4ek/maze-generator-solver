package maze.solver;

import maze.model.Coordinate;

/**
 * Класс {@code AStarSolver} реализует алгоритм A* для поиска оптимального пути
 * в лабиринте. Алгоритм A* использует комбинированную стоимость узлов и эвристическую
 * функцию, чтобы находить наилучший путь от начальной точки до конечной.
 */
public class AStarSolver extends BaseSolver {
    /**
     * Рассчитывает приоритет узла, который определяется как сумма стоимости узла и эвристической
     * оценки расстояния до конечной точки. Эвристическая функция использует
     * манхэттенское расстояние между координатами узла и конечной точкой.
     *
     * @param node узел, для которого нужно рассчитать приоритет.
     * @return комбинированная стоимость узла как приоритет.
     */
    @Override
    protected int calculatePriority(Node node) {
        return node.cost + heuristic(node.coordinate, end);
    }

    /**
     * Эвристическая функция для вычисления расстояния между двумя координатами
     * с использованием манхэттенского расстояния.
     * Манхэттенское расстояние рассчитывается как сумма абсолютных разностей
     * координат строк и столбцов.
     *
     * @param a первая координата.
     * @param b вторая координата.
     * @return манхэттенское расстояние между координатами.
     */
    private int heuristic(Coordinate a, Coordinate b) {
        return Math.abs(a.row() - b.row()) + Math.abs(a.col() - b.col());
    }
}
